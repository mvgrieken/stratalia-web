name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npm run typecheck
      
    - name: Run unit tests
      run: npm run test:coverage
      env:
        # Test environment variables
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
        ENABLE_QUIZ: true
        ENABLE_LEADERBOARD: true
        ENABLE_COMMUNITY: true
        ENABLE_CHALLENGES: true
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        
  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
        
    - name: Start application
      run: npm start &
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
        
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7
        
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for hardcoded secrets
      run: |
        if grep -r -E "(api_key|secret|password|token)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ | grep -v "process.env" | grep -v "// " | grep -v "/* "; then
          echo "‚ùå Potential hardcoded secrets found!"
          exit 1
        else
          echo "‚úÖ No hardcoded secrets detected"
        fi
        
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test production build
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: https://demo.supabase.co
        NEXT_PUBLIC_SUPABASE_ANON_KEY: demo-key
        SUPABASE_SERVICE_ROLE_KEY: demo-service-key
        
    - name: Test build artifacts
      run: |
        if [ ! -d ".next" ]; then
          echo "‚ùå Build artifacts not found!"
          exit 1
        fi
        
        if [ ! -f ".next/BUILD_ID" ]; then
          echo "‚ùå Build ID not found!"
          exit 1
        fi
        
        echo "‚úÖ Build artifacts verified"
        
  deployment-ready:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, security-audit, build-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment ready notification
      run: |
        echo "üöÄ All checks passed! Ready for deployment to production."
        echo "üìä Pipeline Summary:"
        echo "‚úÖ Unit tests passed"
        echo "‚úÖ E2E tests passed" 
        echo "‚úÖ Security audit passed"
        echo "‚úÖ Build test passed"
        echo "‚úÖ TypeScript compilation successful"
        echo "‚úÖ ESLint checks passed"